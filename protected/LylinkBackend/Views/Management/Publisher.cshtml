@using LylinkBackend_API.Models
@model Publisher
<!DOCTYPE html>
<html lang="en">
    <head>
        @await Html.PartialAsync("HeadContent", new HeadContent()
        {
            Description = "Lylink - Management",
            Keywords = "lylink, management",
            Title = "Lylink - Management",
        })

        <style>
            body .container {
                width: 97.5%;
                margin: 0 auto;
            }

            body main {
                width: 70%;
            }

            body aside {
                position: fixed;
                top: 20%;
                right: 0;
            }

            .tab-content {
                top: 30%;
                padding: 0px;
                border-width: 0px;
                border-style: none;
                background-color: transparent;
                border-color: transparent;
            }

            .tab-container {
                max-width: 100%;
                width: 100%;
            }

            button {
                margin: 0 auto;
                margin-top: 5px;
                display: block;
            }
        </style>
    </head>
    
    <body>
        <div id="adblock-background"></div>
        <div id="adblock-popup">
            <p>Hey, it looks like a resource failed to load. If you have an ad-blocker, please turn it off.</p>
            <p>This site will never have ads. Please turn off your ad-blocker so my stylesheets load properly.</p>
            <p>Thank you.</p>
            <button onclick="closePopup()">Close</button>
        </div>
        <div id="page-container">
            @await Html.PartialAsync(nameof(SiteColorToggle), new SiteColorToggle
            {
            })
            <div id="content-wrap">
                <header>
                    @await Html.PartialAsync("PageHeader", new PageHeader
                    {
                        Name = "Publisher",
                        ParentCategories = new List<PageLink>()
                        {
                            new PageLink() { Name = "index", Slug = "/" },
                            new PageLink() { Name = "management", Slug = "/management?accessToken=" + Model.AccessToken },
                        }
                    })
                </header>
                <div class="container">
                    <div class="tab-container">
                        <main>
                            <div class="tab-buttons">
                                <button class="tab-button" onclick="showHtmlView()">HTML View</button>
                                <button class="tab-button" onclick="showRenderedView()">Rendered View</button>
                            </div>
                            <div width="100%"><pre width="100%" id="html" class="tab-content" contenteditable="true" style="display: block;"></pre></div>
                            <div id="rendered" class="tab-content" style="display: none;" contenteditable="true"></div>
                        </main>
                        <aside>
                            <form style="display: inline-block">
                                <label>
                                    Posts
                                    <select onchange="getSlugBody(this)">
                                        <option value="">Select a slug</option>
                                        @foreach (string? slug in Model.AvailableSlugs)
                                        {
                                            <option value="@slug">@slug</option>
                                        }
                                    </select>
                                </label>
                            </form>
                            <form action="/saveDraft" method="post" style="display: inline-block">
                                <label>
                                    Title
                                    <input type="text" id="title" name="Title" placeholder="Title" required />
                                </label>

                                <label>
                                    Description
                                    <input type="text" id="description" name="Description" placeholder="Description" required />
                                </label>

                                <label>
                                    Keywords
                                    <input type="text" id="keywords" name="Keywords" placeholder="Keywords" required />
                                </label>

                                <label>
                                    Slug
                                    <input type="text" id="slug" name="Slug" placeholder="Slug" required />
                                </label>

                                <label>
                                    Categories
                                    <select id="categoryBox" name="ParentSlug" required>
                                        <option value="">Select a category</option>
                                        @foreach (string? slug in Model.AvailableCategories)
                                        {
                                            <option value="@slug">@slug</option>
                                        }
                                    </select>
                                </label>

                                <label>
                                    Name
                                    <input type="text" id="name" name="Name" placeholder="Name" required />
                                </label>

                                <input type="hidden" id="body" name="Body" />
                                <input type="hidden" name="accessToken" value="@Model.AccessToken" />

                                <button type="submit">Save Draft</button>
                            </form>
                        </aside>
                    </div>
                </div>
            </div>
            <footer>
                <p>
                    Copyright 2024, All Rights Reserved
                </p>
            </footer>
        </div>
    
        <script src="https://cdn.jsdelivr.net/npm/simply-beautiful@latest/dist/index.min.js"></script>

        <script defer>
            @if (Model.NavigatedFromFormSubmit)
            {
                Html.Raw(@"alert(""Post update successful.""");            
            }

            var options = {
                indent_size: 4,
                max_char: 0
            };

            var beautify = SimplyBeautiful();

            function showHtmlView() {
                let htmlView = document.getElementById('html');
                let renderedView = document.getElementById('rendered');

                if (htmlView.style.display === 'none') {
                    htmlView.innerText = beautify.html(parseMarkdown(renderedView.innerHTML), options);

                    showTabContent(event, 'html');
                }
            }

            function showRenderedView() {
                let htmlView = document.getElementById('html');
                let renderedView = document.getElementById('rendered');

                if (renderedView.style.display === 'none') {
                renderedView.innerHTML = parseMarkdown(htmlView.innerText);
                    
                    showTabContent(event, 'rendered');
                }
            }

            document.getElementById('html').addEventListener('keydown', function (event) {
                if (event.key === 'Tab') {
                    event.preventDefault();

                    const selection = window.getSelection();
                    const range = selection.getRangeAt(0);

                    const spaceNode = document.createTextNode('    ');

                    range.insertNode(spaceNode);

                    range.setStartAfter(spaceNode);
                    range.setEndAfter(spaceNode);

                    selection.removeAllRanges();
                    selection.addRange(range);
                }

                if (event.ctrlKey && event.key === 'i') {
                    event.preventDefault();

                    const selection = window.getSelection();
                    const range = selection.getRangeAt(0);
                    const selectedText = selection.toString();

                    if (selectedText.length > 0) {
                        const textWithEm = `<em>${selectedText}</em>`;

                        if (selectedText.startsWith('<em>') && selectedText.endsWith('</em>')) {
                            const newText = selectedText.slice(4, -5); // Remove the <em> and </em> part
                            range.deleteContents(); // Clear the selected text
                            range.insertNode(document.createTextNode(newText)); // Insert plain text
                        } else {
                            range.deleteContents(); // Clear the selected text
                            range.insertNode(document.createTextNode(textWithEm)); // Insert <em>wrapped</em> text
                        }
                    }
                }

                setTimeout(() => document.getElementById("body").value = event.target.innerText, 50);
            });

            document.getElementById("rendered").addEventListener("keydown", (event) => {
                document.getElementById("body").value = event.target.innerHTML;
            })

            function getSlugBody(slugBox) {
                fetch(`/getSlugPost?accessToken=@Model.AccessToken&slug=${slugBox.value}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json' // Assuming you're sending JSON
                    },
                })
                .then(async response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }

                    response = await response.text();

                    return JSON.parse(response);
                })
                .then(data => {
                    document.getElementById('title').value = data.title;
                    document.getElementById('keywords').value = data.keywords;
                    document.getElementById('description').value = data.description;
                    document.getElementById('name').value = data.name;
                    document.getElementById('slug').value = data.slug;

                    document.getElementById('html').textContent = beautify.html(data.body, options);
                    document.getElementById('rendered').innerHTML = data.body;
                    document.getElementById("body").value = beautify.html(data.body, options);

                    if (data.parentSlug === undefined) {
                        document.getElementById('categoryBox').value = 'none';
                    }
                    else {
                        document.getElementById('categoryBox').value = data.parentSlug;
                    }
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
            }

            function parseMarkdown(text) {
                text = text.replace(/\*(.*?)\*/g, '<strong>$1</strong>');

                text = text.replace(/_(.*?)_/g, '<em>$1</em>');

                return text;
            }
        </script>
    </body>
</html>